{% extends '@twig/base.html.twig' %}

{% block title %}Quiz App!{% endblock %}


{% block menu_quiz %}
    <li class="quiz-Navigation-bar-li"><a class="quiz-a-active" href="{{ path('questions_page') }}">Quiz</a></li>
{% endblock menu_quiz %}

{% block body %}
    <div class="grid-container">
        <div class="header-grid">Header</div>
        <div class="menu-grid">
            <span style="padding-bottom: 30px">
                Menu
            </span>
            <div>

            </div>
        </div>


        <div class="main-grid">
            <h6>{{ questionGroup.name }} QuestionsGroup: ✅</h6>
            <table class="quiz-list-box">
                <tr id="scenarioBox" >
                    <td>
                        <span id="scenarioText" class="quiz-title-text"></span>
                        <span id="scenarioPoints" class="quiz-title-text"></span>
                        <div id="scenarioImage">
                            <img src="">
                        </div>
                    </td>
                </tr>
                <tr>
                    <td id="quizBox">

                        <span id="quizText" class="quiz-title-text">

                        </span>

                        <div id="quizImage">
                        </div>
                    </td>
                </tr>
                <td>
                    <div id="answerStatus"></div>
                </td>
                <tr>
                    <td id="answersBox" class="quiz-div-box-answer"></td>
                </tr>
                <tr>
                    <td id="answersDes">
                    </td>
                </tr>
                <tr>
                    <td id="controlBox" class="quiz-div-box">
                        control box
                    </td>
                </tr>
                <tr class="quiz-info-box">
                    <td id="infoBox">
                    </td>
                </tr>
            </table>



        </div>

        <div class="right-grid">Right</div>
        <div class="footer-grid">Footer</div>
    </div>


    {% block javascripts %}
        <script>
            var questionGroupId;
            let scenarioCounter = 0;
            let quizCounter = 0;
            let questionGroup = null;
            let infoCounter = 0;
            let infoLineCounter = 0;

            /**
             * its called on page load
             * fill the page with scenarios and questions
             */
            function prepareScenarios(){
                //console.log(questionGroup);

                let scenarios = questionGroup.scenarios;
                let currentScenario = scenarios[scenarioCounter];
                let quizs = currentScenario.questions
                let currentQuiz = quizs[quizCounter];

                document.getElementById('controlBox').innerHTML = '';
                document.getElementById('answersBox').innerHTML = '';

               // console.log(scenarios[scenarioCounter]);
                console.log(currentQuiz[quizCounter]);
                //document.getElementById('scenarioText').innerText = 'Scenario:'.concat(currentScenario.title.replace(/(\r\n|\n|\r)/gm,""));
                fillScenario(currentScenario, currentQuiz);
                //contorl buttons
                //previous Quiz button
                if (scenarioCounter > 0 || quizCounter > 0){
                    var previousButton = document.createElement("button");
                    previousButton.innerHTML = 'Previous';
                    previousButton.setAttribute('class', 'quiz-button-previous');
                    previousButton.setAttribute('id', 'previousButton');
                    document.getElementById("controlBox").appendChild(previousButton);
                    document.getElementById("previousButton").onclick = function(){ return previousQuestion(scenarios,quizs)};
                }

                //answer submit
                var inputButton = document.createElement("button");
                inputButton.innerHTML = 'Submit';
                inputButton.setAttribute('class', 'quiz-button-submit');
                inputButton.setAttribute('id', 'inputButton');
                //inputButton.setAttribute('onclick', 'validateAnswers(currentQuiz)');
                document.getElementById("controlBox").appendChild(inputButton);
                document.getElementById("inputButton").onclick = function(){ return validateAnswers(currentQuiz)};

                //next Quiz button
                var nextButton = document.createElement("button");
                nextButton.innerHTML = 'Next';
                nextButton.setAttribute('class', 'quiz-button-next');
                nextButton.setAttribute('id', 'nextButton');
                document.getElementById("controlBox").appendChild(nextButton);
                document.getElementById("nextButton").onclick = function(){ return nextQuestion(scenarios,quizs)};

                //info section, quiz numberslist
             /*   infoList = document.createElement("ul");
                infoList.setAttribute('id', 'infoList');
                infoList.setAttribute('class', 'quiz-info-box');


                document.getElementById('infoBox').appendChild(infoList);
*/
                //scenarios.forEach(addInfo);
                for (var i = 0; i < scenarios.length; i++)
                {
                       addInfo(scenarios[i], i);
                }
                //document.getElementById('answersBox').innerText = currentScenario.title;
                //console.log(questionGroup.scenarios)
            }

            function fillScenario(){
                let scenarios = questionGroup.scenarios;
                let currentScenario = scenarios[scenarioCounter];
                let quizs = currentScenario.questions
                let currentQuiz = quizs[quizCounter];

                document.getElementById('scenarioText').innerText = 'Scenario:'.concat(currentScenario.title);
                document.getElementById('scenarioPoints').innerText = ' #Points:'.concat(currentScenario.points);
                document.getElementById('answerStatus').innerHTML= '';
                document.getElementById('answersDes').innerHTML= '';

                if (currentScenario.image){
                    document.getElementById('scenarioImage').innerText = currentScenario.image;
                }
                //quizs
                document.getElementById('quizText').innerText = currentQuiz.title;
                if (currentQuiz.image) {
                    document.getElementById('quizImage').innerText = currentQuiz.image;
                }
                //answers
                if (currentQuiz.isMultipleChoice){
                    document.getElementById('answersBox').innerHTML = '';
                    var answers = currentQuiz.answers;
                    answers.forEach(addAnswer);

                }else{
                    document.getElementById('answersBox').innerHTML = '';
                    var input = document.createElement("input");
                    input.setAttribute('type', 'text');
                    input.setAttribute('id', 'answerInputText');
                    input.setAttribute('placeholder', 'Your Answer');
                    //var textAnswer = document.createTextNode(index.concat( item.title ));
                    //answer.appendChild(textAnswer);
                    document.getElementById("answersBox").appendChild(input);
                }
            }

            function addInfo(scenario, sIndex) {
                console.log(infoCounter);
                for (let j = 0; j < scenario.questions.length; j++)
                {
                    if (infoLineCounter > 10){
                        var element = document.createElement("br");
                        document.getElementById('infoBox').appendChild(element);
                        infoLineCounter = 0;
                    }
                   // var element = document.createElement("li");
                    var element = document.createElement("a");
                    element.setAttribute('class', 'quiz-info-list');
                    element.setAttribute('id', sIndex.toString().concat('q').concat(j.toString()));
                    element.onclick = function(){ return selectQuiz(sIndex, j)};
                    var linkText = document.createTextNode(infoCounter.toString());
                    element.title = infoCounter.toString();
                    element.href ='#quizBox';
                    element.appendChild(linkText);
                    //document.getElementById('infoList').appendChild(element);
                    document.getElementById('infoBox').appendChild(element);
                    infoCounter++;
                    infoLineCounter++;
                }

            }
            function selectQuiz(sIndex, quizIndex){
                console.log(sIndex, quizIndex);
                quizCounter = quizIndex;
                scenarioCounter = sIndex;
                return fillScenario();
            }

            /**
             * validate the answers of a question then call method showAnswerDescription
             * @param quiz the current question
             */
            function validateAnswers(quiz){
                console.log('validateAnswers');
                console.log(quiz);
                if (quiz.isMultipleChoice){
                    for (i = 0; i < quiz.answers.length; i++){
                        userAnswer = document.getElementById('answer'.concat(i)).checked;
                        console.log(userAnswer && quiz.answers[i].isCorrect);
                        if (userAnswer && quiz.answers[i].isCorrect){
                            document.getElementById('label'.concat(i)).append('✅');
                            document.getElementById('label'.concat(i)).style.color= 'Green';
                        }else if (!userAnswer && !quiz.answers[i].isCorrect) {
                            //document.getElementById('label'.concat(i)).append('✅');
                            document.getElementById('label'.concat(i)).style.color= 'Green';
                        }else {
                            document.getElementById('label'.concat(i)).style.color= 'Red';
                        }
                    }
                }else {
                    userAnswer = document.getElementById('answerInputText').value;
                    if (quiz.answerDescription.includes(userAnswer)){
                        document.getElementById('answerStatus').innerHTML= 'Correct';
                        document.getElementById('answerStatus').style.color= 'Green';
                    }else {
                        document.getElementById('answerStatus').innerHTML= 'Wrong';
                        document.getElementById('answerStatus').style.color= 'Red';
                    }
                }
                showAnswerDescription(quiz);
            }

            /**
             * navigate to next question or next scenario if available
             * @param scenarios
             * @param quizs
             */
            function nextQuestion(scenarios, quizs){
                console.log('nextQiuz');
                document.getElementById('answerStatus').innerHTML= '';
                document.getElementById('answersDes').innerHTML= '';
                var nextQuiz= quizCounter +1;
                if (quizs[nextQuiz]){
                    quizCounter = quizCounter +1;
                     return prepareScenarios();
                }else {
                    var nextScenario= scenarioCounter +1;
                    if (scenarios[nextScenario]) {
                        scenarioCounter = scenarioCounter + 1;
                        quizCounter = 0;
                        return prepareScenarios();
                    }else{
                        return finishScenarios();
                    }
                }
            }

            /**
             * shows answer description of a question
             * @param quiz
             */
            function showAnswerDescription(quiz){
                console.log('showAnswerDescription');
                document.getElementById("answersDes").innerHTML='';
                var answerDes = document.createElement("span");
                answerDes.innerText = quiz.answerDescription;
                answerDes.setAttribute('class', 'quiz-title-text');
                answerDes.setAttribute('id', 'answerDescription');
                document.getElementById("answersDes").appendChild(answerDes);
            }

            /**
             * navigate to a previous question or a previous scenario if available
             * @param scenarios
             * @param quizs
             */
            function previousQuestion(scenarios, quizs){
                console.log('previousQuiz');
                document.getElementById('answerStatus').innerHTML= '';
                document.getElementById('answersDes').innerHTML= '';
                var previousQuiz= quizCounter - 1;
                if (quizs[previousQuiz]){
                    quizCounter = quizCounter -1;
                    return prepareScenarios();
                }else {
                    var previousScenario= scenarioCounter - 1;
                    if (scenarios[previousScenario]) {
                        scenarioCounter = scenarioCounter - 1;
                        quizCounter = scenarios[scenarioCounter].questions.length -1;
                        console.log(quizCounter);
                        return prepareScenarios();
                    }else{
                       // return finishScenarios();
                    }
                }
            }

            /**
             * when no scenarios more available
             */
            function finishScenarios(){
                document.getElementById("controlBox").innerHTML='finshed';
            }

            /**
             * add an answer element to the page if the question is MultipleChoice
             * @param item
             * @param index
             */
            function addAnswer(item, index) {
                var answer = document.createElement("input");
                answer.setAttribute('type', 'checkbox');
                answer.setAttribute('class', 'quiz-div-box-answer');
                answer.setAttribute('id', 'answer'.concat(index.toString()));
                var answerLabel = document.createElement("label");
                answerLabel.setAttribute('for','answer'.concat(index.toString()) );
                answerLabel.setAttribute('id', 'label'.concat(index.toString()));
                answerLabel.setAttribute('class', 'quiz-title-text');
                var textAnswer = document.createTextNode((index+1).toString().concat( item.title ));
                answerLabel.appendChild(textAnswer);
                document.getElementById("answersBox").appendChild(answer);
                document.getElementById("answersBox").appendChild(answerLabel);
                var br = document.createElement('br');
                document.getElementById("answersBox").appendChild(br);

                //document.getElementById("demo").innerHTML += index + ":" + item.title + "<br>";
            }

            /**
             * to be called on page load to load the questionGroup from database
             * using http request to localhost/questions/questionsgroup/id
             * @param id
             */
            function loadQuestionsGroup(id) {
                var xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
                        var response = this.responseText
                        var responseJson = JSON.parse(response);
                        //console.log(JSON.parse(responseJson))
                        questionGroup= JSON.parse(responseJson);
                       prepareScenarios();
                    }
                };
                xhttp.open("POST", "/questions/questionsgroup/"+id, true);
                //xhttp.setRequestHeader("Content-type", "application/json");
                xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xhttp.send();
            }


            /**
             * to be called on page load to identify the questionGroup id and call LoadQuestionsGroup method
             */
            function getQuestionGroup(){
                 questionGroupId = "{{ questionGroup.id }}";
                questionGroup = loadQuestionsGroup(questionGroupId);
            }


            /**
             * listen to load event of the page
             */
            document.addEventListener("DOMContentLoaded", getQuestionGroup);
        </script>

    {% endblock %}


{% endblock %}


